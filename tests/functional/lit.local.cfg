# -*- coding: utf-8 -*-
#                     The LLVM Compiler Infrastructure
#
# This file is distributed under the University of Illinois Open Source
# License. See LICENSE.TXT for details.

import os
import os.path
import lit.util

# test_source_root: The root path where tests are located.
this_dir = os.path.dirname(__file__)
tool_dir = os.path.join(this_dir, 'tools')

config.environment['test_input_dir'] = os.path.join(this_dir, 'Input')

config.environment['CC'] = 'clang'
config.environment['CXX'] = 'clang++'

ab = 'analyze-build'
sb = 'scan-build'
ib = 'intercept-build'

# use binaries from $PATH or bin_dir (does not require package install).
if lit_config.params.get('USE_INSTALLED') is None:
    bin_dir = os.path.join(this_dir, 'bin')
    parent_dir = os.path.dirname(this_dir)
    project_dir = os.path.dirname(parent_dir)

    config.environment['PATH'] = os.pathsep.join([bin_dir, os.environ['PATH']])
    config.environment['PYTHONPATH'] = project_dir

# run with coverage if the tool is available
if 'coverage' in config.available_features:
    rc_file=os.path.join(project_dir, '.coveragerc')
    config.environment['COVERAGE_PROCESS_START'] = rc_file

    coverage = 'coverage run --rcfile={rc}'.format(rc=rc_file)
    ab = '{coverage} {path}'.format(
        coverage=coverage,
        path=os.path.join(bin_dir, 'analyze-build'))
    sb = '{coverage} {path}'.format(
        coverage=coverage,
        path=os.path.join(bin_dir, 'scan-build'))
    ib = '{coverage} {path}'.format(
        coverage=coverage,
        path=os.path.join(bin_dir, 'intercept-build'))

config.substitutions.append(
    ('%{analyze-build}',
     '{cmd} -vvvv'.format(cmd=ab)))
config.substitutions.append(
    ('%{scan-build}',
     '{cmd} -vvvv'.format(cmd=sb)))
config.substitutions.append(
    ('%{intercept-build}',
     '{cmd} -vvvv'.format(cmd=ib)))
config.substitutions.append(
    ('%{cdb_diff}',
    '{python} {diff}'.format(python=sys.executable, diff=os.path.join(tool_dir, 'diff.py'))))
config.substitutions.append(
    ('%{expect}',
    '{python} {expect}'.format(python=sys.executable, expect=os.path.join(tool_dir, 'expect.py'))))


print("lit.local.cfg config")
print(config.substitutions)
print(config.environment)
print(config.available_features)
